function MP_plot_regrcoef_pupil_two(input1,input2,inputlabel,pvalThresh,tlabel,xtitle)
% % plot_regr %
%PURPOSE:   Plot the average coefficients from two multiple linear
%regressions for direct comparison
%AUTHORS:   AC Kwan 170515
%
%INPUT ARGUMENTS
%   input:        Structure generated by linear_regr().
%   pvalThresh:   Threshold value to deem whether p-values are significant
%   tlabel:       Text to put as title of the plot.
%   xtitle:       Text to put as the label for x-axis.

%% setup
t=input1.regr_time;
dt=nanmean(diff(t));

nCells=numel(input1);
for j=1:nCells
    if isfield(input1, 'pval')
        pval1(:,:,j)=input1.pval;
        pval2(:,:,j)=input2.pval;
    end
    coeff1(:,:,j) = nanmean(input1.coeff,3);
     coeff2(:,:,j) = nanmean(input2.coeff,3);
end

nPredictor=input1.numPredictor;

nback=input1.nback;

if (input1.interaction == true)
    if nPredictor == 2
        panelv = nPredictor + 1;    %plot extra row for the interaction terms
        nInteraction = 1;
    else
        panelv = nPredictor + 2;    %plot extra row for the interaction terms
        nInteraction = 2;
    end
else
    panelv = nPredictor;
    nInteraction = 0;
end

%% plot results

h = figure;

% determine the y limits, ignore the bias term
ymax = max(max(max(coeff1(:,2:end))),max(max(coeff2(:,2:end))));
ymin = min(min(min(coeff1(:,2:end))),min(min(coeff2(:,2:end))));

% ceil to 0.5
upperLimit = ceil(ymax*2)/2;
lowerLimit = floor(ymin*2)/2;
for l=1:nPredictor
    for k=1:1+nback
        currPredictor=1+k+(l-1)*(1+nback); %first +1 because first term is bias
        
        % determine whether to put x/y labels
        if nPredictor == 8  % for dQ and chosen Q
            subplot(2,4,currPredictor-1);hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 9 % for control plot
            subplot(3,3, currPredictor-1);hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 7  % for RPE/chosenQ regression
            subplot(2,4,currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 2 & nback == 0% for pos/neg RPE
            subplot(1,2, currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 14 % for future choice and reward
            subplot(4,4, currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 5  % for reward 
            subplot(2,3, currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        elseif nPredictor == 12 % for dQ and dC
            subplot(4,3, currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        else
            subplot(panelv,1+nback,currPredictor-1); hold on;
            [if_xlabel,if_ylabel] = if_label(currPredictor, nPredictor, nback);
        end
        % patch([t(1) t(end) t(end) t(1)],[0 0 100*pvalThresh 100*pvalThresh],[0.7 0.7 0.7],'EdgeColor','none');
        plot(t,coeff1(:,currPredictor,:),'.-','color',[0 0.4470 0.7410],'MarkerSize',15);
        hold on;
        plot(t,coeff2(:,currPredictor,:),'.-','color',[0.8500 0.3250 0.0980],'MarkerSize',15);
        
        xlim([floor(t(1)) ceil(t(end))]);
        xticks([floor(t(1)):1:ceil(t(end))]);
        title(tlabel{currPredictor-1});
        if if_xlabel == 1
            xlabel(xtitle);
        end
        if if_ylabel == 1
            ylabel('Coefficients');
        end
        yl = ylim;
        % get significant point
        if isfield(input1, 'pval') & ~isfield(input1,'bootlow')  % if there is a pvalue and there is no bootstrap
            for ii = 1:length(pval1(:,currPredictor,:))
                if pval1(ii,currPredictor,:) < pvalThresh
                    hold on;
                    scatter(t(ii),1,25,'filled','black');
                end
            end
           
        else
            % this is average across session, obtained a CI with bootstrap
            % plot the shaded errors
            hold on;
            gray=[0.7 0.7 0.7];
            errorshade(t,input1.bootlow(:,currPredictor),input1.boothigh(:,currPredictor),[0 0.4470 0.7410]);
             plot(t,coeff1(:,currPredictor,:),'.-','color',[0 0.4470 0.7410],'MarkerSize',15);
              hold on;
            errorshade(t,input2.bootlow(:,currPredictor),input2.boothigh(:,currPredictor),[0.8500 0.3250 0.0980]);
            hold on;
            plot(t,coeff2(:,currPredictor,:),'.-','color',[0.8500 0.3250 0.0980],'MarkerSize',15);
        
            
        end
        % plot the vertical line aligned to the cue
        
        % find the right limit
        ylim([lowerLimit upperLimit]);
        plot([0 0],[lowerLimit upperLimit],'k','LineWidth',1);
    end
end





end