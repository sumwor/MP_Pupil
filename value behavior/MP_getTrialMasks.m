function [ trials ] = MP_getTrialMasks( trialData )
% % MP_getTrialMasks %
%PURPOSE:   Create data structure, 'trials', containing logical masks
%           of size(nTrials,1) for task variables.
%AUTHORS:   AC Kwan 170518
%
%INPUT ARGUMENTS
%   trialData:  Structure generated by MP_getSessionData()
%   blocks:     Structure generated by value_getBlockData()
%
%OUTPUT VARIABLES
%   trials:     Structure containing these fields, each a logical mask
%               indicating whether trial(idx) is of the corresponding subset, e.g.,
%               response==left.

nTrials = numel(trialData.cueTimes);

%GET CODES FROM PRESENTATION
[STIM,RESP,OUTCOME,RULE,EVENT] = MP_getPresentationCodes(trialData.presCodeSet);

%GET MASKS FOR THOSE RESP/OUTCOME/RULE TYPES WITH CLEAR MAPPINGS
taskVar = {'cue' 'response' 'outcome' 'rule'};
for i = 1:numel(taskVar)
    clear codes;
    switch taskVar{i}
        case 'cue'
            % codes.go = [STIM.GO];
            codes.go = [RULE.STARTEXPTLEFT, RULE.STARTEXPTRIGHT];
            % in later version of MP task, there is no separate events for
            % go
           
        case 'response'
            codes.left = [RESP.LEFT];
            codes.right = [RESP.RIGHT];
        case 'outcome'
            codes.reward = [OUTCOME.REWARDLEFT OUTCOME.REWARDRIGHT];
            codes.noreward = [OUTCOME.NOREWARDLEFT OUTCOME.NOREWARDRIGHT];
            codes.miss = [OUTCOME.MISS];
        case 'rule'
            if isfield(RULE,'STARTEXPTLEFT')   %matching pennies
                codes.compleft = [RULE.STARTEXPTLEFT];
                codes.compright = [RULE.STARTEXPTRIGHT];
            elseif isfield(RULE,'L70R10')      %two-armed bandit
                codes.L70R10 = [RULE.L70R10];
                codes.L10R70 = [RULE.L10R70];
            end
    end
    fields = fieldnames(codes);
    for j = 1:numel(fields)
        trials.(fields{j}) = ismember(trialData.(taskVar{i}),codes.(fields{j})); %Generate trial mask for each field in 'codes'
    end;
end;

% Contingencies: L70R10=1; L10R70=2
% trials.rule=nan(nTrials,1);
% trials.rule(trials.L70R10)=1;
% trials.rule(trials.L10R70)=2;
% trials.rule_labels = {'L70R10','L10R70'};

%% Check consistency among the extracted trial values
if sum(trials.reward)+sum(trials.noreward)+sum(trials.miss) ~= nTrials
    disp('ERROR in MP_getTrialMasks: check #1');
elseif sum(trials.left)+sum(trials.right)+sum(trials.miss) ~= nTrials
    disp('ERROR in MP_getTrialMasks: check #2');
end

if isfield(trialData,'nInterpulse')
    if sum(trials.reward) > trialData.nInterpulse;
        disp('WARNING in MP_getTrialMasks: too few interpulse events');
    end
end

if isfield(trials,'compleft')   %matching pennies
    if sum(trials.left & trials.compleft) + sum(trials.right & trials.compright) ~= sum(trials.reward)
        disp('ERROR in MP_getTrialMasks: check #1 for pennies');
    end
end

if isfield(trials,'L70R10')   %two-armed bandit
    if sum(trials.L70R10) + sum(trials.L10R70) ~= nTrials
        disp('ERROR in MP_getTrialMasks: check #1 for bandit');
    end
end

end %end func

